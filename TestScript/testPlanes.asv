load('ptCloud_filtered.mat');

% figure('Name', 'Big Cloud');
% pcshow(mapper.bigCloud);

% figure('Name', 'Downsample');
pcdownsamplecloud = pcdownsample(filteredPT, 'gridAverage', 0.01);
% pcshow(pcdownsamplecloud);

% figure('Name', 'Denoise');
denoiseCloud = pcdenoise(pcdownsamplecloud);
% pcshow(denoiseCloud);

figure('Name', 'Plane1');
[model1, inlierIndices, outlierIndices] = pcfitplane(filteredPT, 0.02);

plane1 = select(filteredPT, inlierIndices);
remainCloud = select(filteredPT, outlierIndices);

[model2, inlierIndices2, outlierIndices2] = pcfitplane(remainCloud, 0.02);
plane2 = select(remainCloud, inlierIndices2);

pcshow(plane1);
hold on 
pcshow(plane2);

plot(model1);
plot(model2);

[p1,q1] = getOrientedPoint(model1, plane1)
poseplot(quaternion(q),'Position',p)
%% Get orientedPoint
%https://math.stackexchange.com/questions/2356649/how-to-find-the-quaternion-representing-the-rotation-between-two-3-d-vectors
% fossen P.33

function [p,q] = getOrientedPoint(model, plane)
    v1 = [1,0,0];
    
    c = cross(v1, model.Normal);
    
    n = c / norm(c);
    
    theta = atan(norm(c) / dot(v1,model.Normal));
    
    q = [ cos(theta / 2), n * sin(theta / 2)]
    
    
    p(1) = (plane.XLimits(2)-plane.XLimits(1))/2 + plane.XLimits(1)
    p(2) = (plane.YLimits(2)-plane.YLimits(1))/2 + plane.YLimits(1)
    p(3) = (plane.ZLimits(2)-plane.ZLimits(1))/2 + plane.ZLimits(1)

end
